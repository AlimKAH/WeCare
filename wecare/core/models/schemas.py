"""
Data schemas for the WeCare application.
Defines the structure of product data and AI integration responses.
"""
from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional, Union
from datetime import datetime


@dataclass
class Weight:
    """Product weight information."""
    value: float
    unit: str


@dataclass
class Ingredient:
    """Product ingredient with safety classification."""
    name: str
    safety: str  # "safe", "suspicious", "harmful"


@dataclass
class FatInfo:
    """Fat nutritional information."""
    total: float
    saturated: float


@dataclass
class CarbInfo:
    """Carbohydrate nutritional information."""
    total: float
    sugar: float


@dataclass
class NutritionInfo:
    """Complete nutritional information for a product."""
    calories: float
    protein: float
    fat: FatInfo
    carbohydrates: CarbInfo
    fiber: float
    salt: float
    sodium: float


@dataclass
class Score:
    """Product quality score information."""
    total: int
    category: str  # "Excellent", "Good", "Average", "Low Quality", "Very Low Quality"
    nutrition_score: int
    additives_score: int


@dataclass
class ProductInfo:
    """Core product information from external service."""
    id: str
    barcode: str
    name: str
    manufacturer: str
    weight: Weight
    ingredients: List[Ingredient]
    nutrition: NutritionInfo
    score: Optional[Score] = None
    additives: List[str] = field(default_factory=list)
    image_url: Optional[str] = None


@dataclass
class AllergenAnalysis:
    """Allergen analysis generated by AI."""
    detected_allergens: List[str]
    user_allergens_present: List[str]


@dataclass
class DietCompatibility:
    """Diet compatibility information generated by AI."""
    diet: str
    compatible: bool
    reason: str


@dataclass
class ProductAnalysis:
    """Complete product analysis including AI-generated components."""
    product: ProductInfo
    allergens_analysis: AllergenAnalysis
    diet_compatibility: List[DietCompatibility]
    scan_timestamp: str = field(default_factory=lambda: datetime.now().isoformat())


# AI Service Input/Output Schemas
@dataclass
class AIServiceInput:
    """Input data for AI service."""
    product_info: Dict[str, Any]  # Parsed from external service
    user_allergens: List[str]
    user_diets: List[str]
    calculate_score: bool = False


@dataclass
class AIServiceOutput:
    """Output data from AI service."""
    allergens_analysis: AllergenAnalysis
    diet_compatibility: List[DietCompatibility]
    score: Optional[Score] = None 